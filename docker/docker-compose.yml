version: '3.8'
services:

  db:
    build:
      context: services/db
      dockerfile: Dockerfile.db
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ~/pg_data:/var/lib/postgresql/data/pgdata
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_USER: postgres
      POSTGRES_DB: user
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - db
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ~/pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - db
    restart: always

#  frontend:
#    build:
#      context: ../frontend
#      dockerfile: Dockerfile.frontend
#    image: restaurant-advisor-react-frontend
#    ports:
#      - "3000:3000"
#    restart: always
#    depends_on:
#      - restaurant
#      - review
#      - user
#      - image
#      - notification

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  # https://stackoverflow.com/a/74180431
  keycloak:
    container_name: keycloak
    env_file:
      - .env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://localhost:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_HOSTNAME_STRICT: false
      KC_EDGE: proxy
    image: keycloak/keycloak:18.0
    network_mode: host
    depends_on:
      - db
#   https://stackoverflow.com/a/73690220
    command: ["start-dev", "--http-port=8180"]

#  eureka-server:
#    image: alexius1905/eureka-server:latest
#    container_name: eureka-server
#    ports:
#      - "8761:8761"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    networks:
#      - spring
#    depends_on:
#      - zipkin
#
#  apigw:
#    image: alexius1905/apigw:latest
#    container_name: apigw
#    ports:
#      - "8083:8083"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    networks:
#      - spring
#    depends_on:
#      - zipkin
#      - eureka-server

  restaurant:
    image: alexius1905/restaurant:latest
    container_name: restaurant
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

  hotel:
    image: alexius1905/hotel:latest
    container_name: restaurant
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

  user:
    image: alexius1905/user:latest
    container_name: user
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

  review:
    image: alexius1905/review:latest
    container_name: review
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

  image:
    image: alexius1905/image:latest
    container_name: image
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

  notification:
    image: alexius1905/notification:latest
    container_name: notification
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - db
    depends_on:
      - db
      - zipkin
      - rabbitmq

networks:
  db:
    driver: bridge
  spring:
    driver: bridge
